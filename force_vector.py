#!/usr/bin/env python3# -*- coding: utf-8 -*-"""Created on Sun Jul 10 18:13:57 2022@author: ketill"""import mathclass ForceVector:    def __init__(self, x=0, y=0, z=0):        self.x = x        self.y = y        self.z = z            def __repr__(self):        return f"Vector({self.x}, {self.y}, {self.z})"        def __str__(self):        return f"{self.x}i, {self.y}j, {self.z}k"            def __getitem__(self, item):        if item==0:            return self.x        elif item==1:            return self.y        elif item==2:            return self.z        else:            raise IndexError("There are only three elements in the vector")        def __add__(self, other):        return ForceVector(                self.x + other.x,                 self.y + other.y,                 self.z + other.z,        )        def __sub__(self, other):        return ForceVector(                self.x - other.x,                 self.y - other.y,                 self.z - other.z,        )            def __mul__(self, other):        if isinstance(other, ForceVector):  # Vector dot product            return (                self.x * other.x                + self.y * other.y                + self.z * other.z            )        elif isinstance(other, (int, float)):  # Scalar multiplication            return ForceVector(                self.x * other,                self.y * other,                self.z * other,            )        else:            raise TypeError("operand must be Vector, int, or float")        def __truediv__(self, other):        if isinstance(other, (int, float)):            return ForceVector(                self.x / other,                self.y / other,                self.z / other,            )        else:            raise TypeError("operand must be int or float")                    def get_magnitude(self):        return math.sqrt(self.x ** 2 + self.y ** 2  + self.z ** 2)        def normalize(self):        magnitude = self.get_magnitude()        return ForceVector(            self.x / magnitude,            self.y / magnitude,            self.z / magnitude,        )                